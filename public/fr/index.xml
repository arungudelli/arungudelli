<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular Wiki on Angular Wiki</title>
    <link>https://www.angularjswiki.com/fr/</link>
    <description>Recent content in Angular Wiki on Angular Wiki</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>fr</language>
    <copyright>&amp;copy;{year}</copyright>
    <lastBuildDate>Fri, 02 Nov 2018 01:01:05 +0000</lastBuildDate>
    <atom:link href="/fr/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Comment lire les fichiers JSON local dans Angular</title>
      <link>https://www.angularjswiki.com/fr/angular/how-to-read-local-json-files-in-angular/</link>
      <pubDate>Fri, 02 Nov 2018 01:01:05 +0000</pubDate>
      
      <guid>https://www.angularjswiki.com/fr/angular/how-to-read-local-json-files-in-angular/</guid>
      <description>

&lt;p&gt;Nous pouvons importer ou lire des fichiers JSON local dans Angular, de plusieurs façons différentes selon la version Angular que nous utilisons.&lt;/p&gt;

&lt;p&gt;Dans cet article, vous apprendrez différentes méthodes pour lire les fichiers JSON en Angular avec des exemples.&lt;/p&gt;

&lt;h2&gt;Table des matières&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#lecture-des-fichiers-json-local-dans-angular-7-et-angular-6-1&#34;&gt;Lecture des fichiers JSON local dans Angular 7 et Angular 6.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lecture-des-fichiers-json-local-dans-angular-5-ou-angular-4&#34;&gt;Lecture des fichiers JSON local dans Angular 5 ou Angular 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lecture-des-fichiers-json-local-dans-les-versions-angular-2&#34;&gt;Lecture des fichiers JSON local dans les versions Angular 2+.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lecture-des-fichiers-json-local-dans-les-applications-angulaires-hors-ligne&#34;&gt;Lecture des fichiers JSON local dans les applications angulaires hors ligne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h2 id=&#34;lecture-des-fichiers-json-local-dans-angular-7-et-angular-6-1&#34;&gt;Lecture des fichiers JSON local dans Angular 7 et Angular 6.1&lt;/h2&gt;

&lt;p&gt;Le framework Angular supporte TypeScript 2.9 à partir de la version 6.1.&lt;/p&gt;

&lt;p&gt;Dans typescript 2.9 avec l&amp;rsquo;aide de resolveJsonModule nous pouvons importer des fichiers JSON locaux comme des modules&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;ai ajouté un exemple de fichier JSON dans le dossier assets de Angular App.&lt;/p&gt;

&lt;p&gt;Jetez un coup d&amp;rsquo;oeil à l&amp;rsquo;échantillon json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&amp;quot;Post&amp;quot;: &amp;quot;Angular Json Files&amp;quot;,
&amp;quot;CanEdit&amp;quot;: true,
&amp;quot;Version&amp;quot;: 7
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J&amp;rsquo;ai importé sampleJson.json dans notre composant ReadingJsonFiles Component comme indiqué ci-dessous&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { Component, OnInit } from &#39;@angular/core&#39;;
import SampleJson from &#39;../../assets/SampleJson.json&#39;;

@Component({
  selector: &#39;app-reading-json-files&#39;,
  templateUrl: &#39;./reading-json-files.component.html&#39;,
  styleUrls: [&#39;./reading-json-files.component.css&#39;]
})

export class ReadingJsonFilesComponent implements OnInit {

constructor() {
 console.log(&#39;Reading local json files&#39;);
 console.log(SampleJson);
}

ngOnInit() {}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maintenant, si vous compilez l&amp;rsquo;application, vous obtiendrez l&amp;rsquo;erreur suivante.&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;ERROR in src/app/reading-json-files/reading-json-files.component.ts(2,24): error TS2732: Cannot find module &amp;lsquo;../../assets/SampleJson.json&amp;rsquo;. Consider using &amp;lsquo;–resolveJsonModule&amp;rsquo; to import module with &amp;lsquo;.json&amp;rsquo; extension&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Pour supprimer l&amp;rsquo;erreur ci-dessus, dans le fichier tsconfig.json sous les options du compilateur, nous devons ajouter les configurations &amp;ldquo;resolveJsonModule&amp;rdquo; et &amp;ldquo;esModuleInterop&amp;rdquo; comme indiqué ci-dessous.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{  &amp;quot;compilerOptions&amp;quot;: {  &amp;quot;resolveJsonModule&amp;quot;: true, &amp;quot;esModuleInterop&amp;quot;: true } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une autre chose que vous devez comprendre est que le contenu du fichier JSON importé est typesafe.&lt;/p&gt;

&lt;p&gt;Dans le json ci-dessus, version est un nombre. Ainsi, si vous affectez la version à une chaîne de caractères, une erreur sera générée.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SampleJson.Version= &amp;quot;Seven&amp;quot;; //throws error as Version is of type number
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lecture-des-fichiers-json-local-dans-angular-5-ou-angular-4&#34;&gt;Lecture des fichiers JSON local dans Angular 5 ou Angular 4&lt;/h2&gt;

&lt;p&gt;Dans les versions antérieures de Angular comme Angular 5 ou Angular 4 pour lire les fichiers json locaux, nous avons besoin d&amp;rsquo;utiliser HttpClient depuis &amp;lsquo;@angular/common/http&amp;rsquo; et Observable depuis &amp;lsquo;rxjs/Observable&amp;rsquo; comme indiqué ci-dessous.&lt;/p&gt;

&lt;p&gt;Nous devons injecter HttpClient dans le constructor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { HttpClient } from &#39;@angular/common/http&#39;;
import { Observable } from &#39;rxjs&#39;;

@Component({
 selector: &#39;app-reading&#39;,
 templateUrl: &#39;./reading.component.html&#39;,
 styleUrls: [&#39;./reading.component.css&#39;]
})

export class ReadingComponent implements OnInit {
 private _jsonURL = &#39;assets/SampleJson.json&#39;;
 constructor(private http: HttpClient) {
   this.getJSON().subscribe(data =&amp;gt; {
    console.log(data);
   });
 }
 public getJSON(): Observable&amp;lt;any&amp;gt; {
   return this.http.get(this._jsonURL);
 }
 ngOnInit() {
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HttpClient est introduit dans Angular 4.3, Si vous utilisez Angular version 4.3 ci-dessous utilisez la méthode ci-dessous pour lire les fichiers JSON&lt;/p&gt;

&lt;h2 id=&#34;lecture-des-fichiers-json-local-dans-les-versions-angular-2&#34;&gt;Lecture des fichiers JSON local dans les versions Angular 2+.&lt;/h2&gt;

&lt;p&gt;Nous avons besoin d&amp;rsquo;utiliser Http depuis &amp;ldquo;@angular/http&amp;rdquo; pour importer les fichiers JSON dans Angular version 4.3 ci-dessous et Angular 2 + applications.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { Component, Input } from &#39;@angular/core&#39;;
import { Injectable } from &#39;@angular/core&#39;;
import { Http, Response, Headers, RequestOptions } from &#39;@angular/http&#39;;
import {Observable} from &#39;rxjs/Rx&#39;;
import &#39;rxjs/add/operator/map&#39;;
import &#39;rxjs/add/operator/catch&#39;;

@Injectable()
export class ReadingJsonService{

private _jsonURL = &#39;assets/SampleJson.json&#39;;

constructor(private http: Http) {
 var object;
 this.getJSON().subscribe(data =&amp;gt; object=data, error =&amp;gt; console.log(error));
}

public getJSON(): Observable&amp;lt;any&amp;gt; {
  return this.http.get(_jsonURL)
   .map((response:any) =&amp;gt; response.json())
   .catch((error:any) =&amp;gt; console.log(error));

}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lecture-des-fichiers-json-local-dans-les-applications-angulaires-hors-ligne&#34;&gt;Lecture des fichiers JSON local dans les applications angulaires hors ligne&lt;/h2&gt;

&lt;p&gt;Angular Http ne fonctionnera pas si l&amp;rsquo;application est hors ligne.&lt;/p&gt;

&lt;p&gt;Dans ce cas, nous avons un autre moyen d&amp;rsquo;importer les fichiers JSON.&lt;/p&gt;

&lt;p&gt;Nous devons ajouter un nouveau fichier json-typings.d.ts dans le dossier app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;declare module &amp;quot;*.json&amp;quot; {
  const value: any;
  export default value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et puis nous pouvons importer des fichiers JSON tout comme les dernières versions d&amp;rsquo;Angular&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import * as SampleJson from &amp;quot;../../assets/SampleJson.json&amp;quot;;&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>*ngIf else dans Angular &amp; Exemple *NgIf Async Pipe Observable</title>
      <link>https://www.angularjswiki.com/fr/angular/understanding-angulars-ngif-else-then-with-examples/</link>
      <pubDate>Sat, 04 Aug 2018 01:01:05 +0000</pubDate>
      
      <guid>https://www.angularjswiki.com/fr/angular/understanding-angulars-ngif-else-then-with-examples/</guid>
      <description>

&lt;p&gt;Angular&amp;rsquo;s &amp;ldquo;*ngIf&amp;rdquo; affiche ou supprime un élément du DOM en fonction de la condition donnée.&lt;/p&gt;

&lt;p&gt;Pour écrire &amp;ldquo;ngIf else&amp;rdquo; dans angular, il faut définir un modèle &amp;ldquo;else&amp;rdquo; pour la directive &amp;ldquo;*ngIf&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;*ngIf&amp;rdquo; combiné avec &amp;ldquo;async pipe&amp;rdquo; est très utile lors de la lecture de données à partir d&amp;rsquo;un fichier observable.&lt;/p&gt;

&lt;p&gt;Dans toutes les versions de Angular, la syntaxe de la directive &lt;code&gt;*ngif&lt;/code&gt; est la même.&lt;/p&gt;

&lt;h2&gt;Table des matières&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#comprendre-ngif-dans-angular-avec-exemple&#34;&gt;comprendre *ngIf dans Angular avec exemple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#etapes-pour-écrire-ngif-else-en-angulaire-avec-exemple&#34;&gt;Etapes pour écrire &amp;ldquo;*ngIf else&amp;rdquo; en Angulaire avec exemple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ngif-avec-alternative-puis-template-dans-angular&#34;&gt;*ngIf avec alternative puis template dans Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ngif-avec-else-and-then-templates-exemple-dans-angular&#34;&gt;*ngif avec &amp;ldquo;else and then templates&amp;rdquo; exemple dans Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ngif-avec-opérateurs-logiques-and-or-not&#34;&gt;*ngif avec opérateurs logiques AND (&amp;amp;&amp;amp;), OR(||), NOT( !)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#utiliser-la-syntaxe-as-pour-stocker-la-condition-ngif-dans-une-variable-locale&#34;&gt;Utiliser la syntaxe &amp;ldquo;as&amp;rdquo; pour stocker la condition &lt;code&gt;*ngIf&lt;/code&gt; dans une variable locale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ngif-avec-async-pipe-et-exemple-observable&#34;&gt;*ngIf avec async pipe et exemple observable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h2 id=&#34;comprendre-ngif-dans-angular-avec-exemple&#34;&gt;comprendre *ngIf dans Angular avec exemple&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;*ngIf&lt;/code&gt; évalue la condition donnée et rend ensuite le &amp;ldquo;then template&amp;rdquo; ou &amp;ldquo;else template&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Regardez l&amp;rsquo;exemple ci-dessous&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div *ngIf=&amp;quot;display&amp;quot;&amp;gt;Hi I am Visible&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si la propriété &lt;code&gt;display&lt;/code&gt; est vraie alors l&amp;rsquo;élément `&lt;div&gt;&amp;rsquo; sera ajouté au DOM. Sinon, aucun élément ne sera ajouté.&lt;/p&gt;

&lt;p&gt;Les templates par défaut de &lt;code&gt;*ngIf&lt;/code&gt; sont&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;then template&amp;rdquo; est inline template de &lt;code&gt;ngIf&lt;/code&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;else template&amp;rdquo; est vide&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dans le code ci-dessus, inline template est &lt;code&gt;&amp;lt;div&amp;gt;Hi I am Visible&amp;lt;/div&amp;gt;&lt;/code&gt; et il n&amp;rsquo;y a pas else template.&lt;/p&gt;

&lt;p&gt;Nous pouvons lier des templates alternatifs à &lt;code&gt;*ngif&lt;/code&gt; en fonction de notre utilisation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*ngIf&lt;/code&gt; est une directive qui signifie que nous pouvons l&amp;rsquo;ajouter à n&amp;rsquo;importe quelle &amp;ldquo;HTML tag&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p *ngIf=&amp;quot;display&amp;quot;&amp;gt;Visible only if display is true&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ou nous pouvons l&amp;rsquo;appliquer à d&amp;rsquo;autres composants angular, par exemple le composant &lt;a href=&#34;https://www.angularjswiki.com/angular/checkbox-implementation-in-angular-using-angular-material/&#34; target=&#34;_blank&#34;&gt;Material Checkbox&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;mat-checkbox *ngIf=&amp;quot;display&amp;quot;&amp;gt;Material Checkbox&amp;lt;/mat-checkbox&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La syntaxe est très simple, nous devons ajouter un préfixe, astérisque(*) avant le nom de la directive `ngIf&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Alors pourquoi devons-nous ajouter l&amp;rsquo;astérisque avant le nom de la directive ?&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;astérisque devant &amp;ldquo; ngIf &amp;rdquo; nous simplifie la vie.&lt;/p&gt;

&lt;p&gt;Angular convertira l&amp;rsquo;attribut &lt;code&gt;*ngif&lt;/code&gt; en élément &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; comme indiqué ci-dessous.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div *ngIf=&amp;quot;display&amp;quot; class=&amp;quot;inline&amp;quot;&amp;gt;Hi I am Visible&amp;lt;/div&amp;gt; 

//This will be converted to 

&amp;lt;ng-template [ngIf]=&amp;quot;display&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;inline&amp;quot;&amp;gt;Hi I am Visible&amp;lt;/div&amp;gt;
&amp;lt;/ng-template&amp;gt;  

//inline default template (then template)                
//And no else template

&amp;lt;div *ngIf=&amp;quot;false&amp;quot; class=&amp;quot;inline&amp;quot;&amp;gt;This is not added to DOM&amp;lt;/div&amp;gt;

&amp;lt;ng-template [ngIf]=&amp;quot;false&amp;quot;&amp;gt; 
 &amp;lt;div class=&amp;quot;inline&amp;quot;&amp;gt;This is not added to DOM
 &amp;lt;/div&amp;gt; 
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maintenant, la définition ci-dessus a un sens.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;then template&amp;rdquo; est &lt;code&gt;&amp;lt;div&amp;gt;Hi I am Visible&amp;lt;/div&amp;gt;&lt;/code&gt; qui est inline.
 Il n&amp;rsquo;y a pas d&amp;rsquo; &amp;ldquo;else template&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;astérisque n&amp;rsquo;est qu&amp;rsquo;un sucre syntaxique de l&amp;rsquo;élément &lt;a href=&#34;https://www.angularjswiki.com/angular/what-is-ng-template-in-angular/&#34; target=&#34;_blank&#34;&gt;ng-template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Et si vous voyez le HTML généré, aucun élément ne sera ajouté au DOM si la condition de &lt;code&gt;ngIf&lt;/code&gt; est &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;







&lt;figure&gt;

&lt;picture&gt;
    
    
    
    
    &lt;source media=&#34;(min-width: 259px)&#34; srcset=&#34;https://www.angularjswiki.com/fr/angular/understanding-angulars-ngif-else-then-with-examples/ngif.png&#34;&gt;  
    
  &lt;img src=&#34;ngif.png&#34; alt=&#34;ngif&#34; /&gt;
&lt;/picture&gt;
  


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;ngif&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;



&lt;p&gt;Alors pourquoi angular enlèvera l&amp;rsquo;élément plutôt que de le cacher ?&lt;/p&gt;

&lt;p&gt;Lire la suite &lt;a href=&#34;https://www.angularjswiki.com/angular/difference-between-ngif-and-hidden-or-displaynone-in-angular/&#34; target=&#34;_blank&#34;&gt;Différence entre ngIf et &amp;ldquo;hidden&amp;rdquo; dans Angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nous pouvons utiliser `ngIf&amp;rsquo; de quatre manières différentes&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simple `ngIf&amp;rsquo; (comme expliqué ci-dessus)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;*ngIf&amp;rdquo; avec &amp;ldquo;else&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;*ngIf&amp;rdquo; avec &amp;ldquo;then&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;*ngIf&amp;rdquo; avec &amp;ldquo;then&amp;rdquo; et &amp;ldquo;else&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Maintenant, comment pouvons-nous écrire &lt;code&gt;*ngIf else&lt;/code&gt; en angular ?&lt;/p&gt;

&lt;p&gt;nous avons besoin de lier &lt;code&gt;else&#39; template à&lt;/code&gt;*ngIf&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;etapes-pour-écrire-ngif-else-en-angulaire-avec-exemple&#34;&gt;Etapes pour écrire &amp;ldquo;*ngIf else&amp;rdquo; en Angulaire avec exemple&lt;/h2&gt;

&lt;p&gt;Nous apprendrons à écrire &amp;ldquo;*ngIf else&amp;rdquo; en utilisant le &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; d&amp;rsquo;Angular avec un exemple simple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div *ngIf=&amp;quot;display; else elseTemplate&amp;quot; class=&amp;quot;main&amp;quot;&amp;gt;
   Visible when display is true
&amp;lt;/div&amp;gt;
&amp;lt;ng-template #elseTemplate&amp;gt;
   &amp;lt;div class=&amp;quot;alternative&amp;quot;&amp;gt;
      Visible when display is false
   &amp;lt;/div&amp;gt;
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le bloc &lt;code&gt;else&lt;/code&gt; pointe vers un &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; étiqueté &lt;code&gt;#elseTemplate&lt;/code&gt;.
Si la condition ou l&amp;rsquo;expression est vraie, &amp;ldquo;inline template&amp;rdquo; sera rendu par défaut sinon else template sera rendu.&lt;/p&gt;

&lt;p&gt;Et ce template peut être défini n&amp;rsquo;importe où dans la vue des composants, mais comme une bonne pratique et pour améliorer la lisibilité, il est défini juste en dessous du bloc &lt;code&gt;ngIf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { Component, OnInit } from &#39;@angular/core&#39;;
@Component({
selector:&#39;app-ngifelse&#39;,
templateUrl:&#39;./ngifelse.component.html&#39;,
styleUrls: [&#39;./ngifelse.component.css&#39;]
})

export class NgifelseComponent implements OnInit {
   display:boolean;
   constructor() {
    this.display=true;
   }
   ngOnInit() {}
}

//*ngIf else Component View
&amp;lt;ng-template #elseTemplate&amp;gt;
  &amp;lt;div class=&amp;quot;alternative&amp;quot;&amp;gt;
      Visible when display is false
  &amp;lt;/div&amp;gt;
&amp;lt;/ng-template&amp;gt;
&amp;lt;div&amp;gt;
  This example explains how to write *ngIf else block
  in Angular.
  And ng-template block can be defined anywhere in
  the component view
&amp;lt;/div&amp;gt;
&amp;lt;div *ngIf=&amp;quot;display; else elseTemplate&amp;quot; class=&amp;quot;main&amp;quot;&amp;gt;
   Visible when display is true
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J&amp;rsquo;ai déclaré &amp;ldquo;else template&amp;rdquo; au-dessus du bloc &lt;code&gt;*ngIf&#39; dans la vue&lt;/code&gt;NgIfElseComponent&amp;rsquo;, mais évitez d&amp;rsquo;écrire ainsi car c&amp;rsquo;est difficile à comprendre.&lt;/p&gt;

&lt;p&gt;Le bloc &lt;code&gt;*ngIf else&lt;/code&gt; ci-dessus sera converti en l&amp;rsquo;élément &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; suivant.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ng-template [ngIf]=&amp;quot;display&amp;quot; [ngIfElse]=&amp;quot;elseTemplate&amp;quot;&amp;gt; 
 &amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;
    Visible when display is true
 &amp;lt;/div&amp;gt;
&amp;lt;/ng-template&amp;gt;
&amp;lt;ng-template #elseTemplate&amp;gt;
 &amp;lt;div class=&amp;quot;alternative&amp;quot;&amp;gt;
    Visible when display is false 
 &amp;lt;/div&amp;gt;
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ngif-avec-alternative-puis-template-dans-angular&#34;&gt;*ngIf avec alternative puis template dans Angular&lt;/h2&gt;

&lt;p&gt;Par défaut, le &amp;ldquo;then template&amp;rdquo; de &lt;code&gt;*ngIf&lt;/code&gt; est le &amp;ldquo;inline template&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Pour changer le inline template de &lt;code&gt;ngIf&lt;/code&gt;, il suffit de lier &amp;ldquo;then block&amp;rdquo; à l&amp;rsquo;alternative &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Voir l&amp;rsquo;exemple ci-dessous&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { Component, OnInit } from &#39;@angular/core&#39;;
@Component({
selector:&#39;app-ngifthen&#39;,
templateUrl:&#39;./ngifthen.component.html&#39;,
styleUrls: [&#39;./ngifthen.component.css&#39;]
})
export class NgifthenComponent implements OnInit {
display:boolean;
constructor() {
this.display=true;
}
ngOnInit() {}
}

//NgIfthen Component view
&amp;lt;div *ngIf=&amp;quot;display; then thenTemplate&amp;quot;&amp;gt;
  Inline template will be ignored
&amp;lt;/div&amp;gt;
&amp;lt;ng-template #thenTemplate&amp;gt;
  Displayed when display is true
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vous pourriez penser que pourquoi nous avons besoin d&amp;rsquo;une référence de template &lt;code&gt;[ngIfThen]&lt;/code&gt; quand nous avons un template Inline.&lt;/p&gt;

&lt;p&gt;nous pouvons changer les blocs &amp;ldquo;then&amp;rdquo; ou &amp;ldquo;else&amp;rdquo; dynamiquement au moment de l&amp;rsquo;exécution en profitant de ces &lt;code&gt;[ngIfThen]&lt;/code&gt; et &lt;code&gt;[ngIfElse]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lire l&amp;rsquo;article&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;Modifier dynamiquement NgIf &amp;quot;Then&amp;quot;, &amp;quot;Else&amp;quot; Templates Au moment de l&#39;exécution Dans Angular&#34; target=&#34;_blank&#34;&gt;https://www.angularjswiki.com/angular/dynamically-change-ngif-thenelse-templates-at-runtime-in-angular/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ngif-avec-else-and-then-templates-exemple-dans-angular&#34;&gt;*ngif avec &amp;ldquo;else and then templates&amp;rdquo; exemple dans Angular&lt;/h2&gt;

&lt;p&gt;Nous pouvons lier à la fois &amp;ldquo;else template&amp;rdquo; et &amp;ldquo;then template&amp;rdquo; à la directive &lt;code&gt;*ngIf&lt;/code&gt; comme indiqué ci-dessous.&lt;/p&gt;

&lt;p&gt;Et dans ce cas, le &amp;ldquo;inline template&amp;rdquo; par défaut sera ignoré.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div *ngIf=&amp;quot;display; then thenTemplate; else elseTemplate&amp;quot;&amp;gt;
 Inline template will be ignored
&amp;lt;/div&amp;gt;
&amp;lt;ng-template #thenTemplate&amp;gt;
 Displayed when display is true
&amp;lt;/ng-template&amp;gt;
&amp;lt;ng-template #elseTemplate&amp;gt;
 Displayed when display is false
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et ceci sera converti en&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ng-template [ngIf]=&amp;quot;display&amp;quot; [ngIfThen]=&amp;quot;thenTemplate&amp;quot; [ngIfElse]=&amp;quot;elseTemplate&amp;quot;&amp;gt;
 Inline template will be ignored
&amp;lt;/ng-template&amp;gt;
&amp;lt;ng-template #thenTemplate&amp;gt;
 Displayed when display is true
&amp;lt;/ng-template&amp;gt;
&amp;lt;ng-template #elseTemplate&amp;gt;
 Displayed when display is false
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ngif-avec-opérateurs-logiques-and-or-not&#34;&gt;*ngif avec opérateurs logiques AND (&amp;amp;&amp;amp;), OR(||), NOT( !)&lt;/h2&gt;

&lt;p&gt;Nous pouvons utiliser les opérateurs logiques AND (&amp;amp;&amp;amp;&amp;amp;),OR(|||) et NOT( !) en condition *ngif.&lt;/p&gt;

&lt;p&gt;En voici des exemples.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- logic AND &amp;amp;&amp;amp; operator --&amp;gt;
&amp;lt;div *ngIf=&amp;quot;display &amp;amp;&amp;amp; hasAccess&amp;quot;&amp;gt;
Visible when display and hasAccess are true
&amp;lt;/div&amp;gt;

&amp;lt;!-- logic OR || operator --&amp;gt;
&amp;lt;div *ngIf=&amp;quot;display || hasAccess&amp;quot;&amp;gt;
Visisble when one of the variable display or hasAccess true
&amp;lt;/div&amp;gt;

&amp;lt;!-- logical NOT ! operator&amp;quot; --&amp;gt;
&amp;lt;div *ngIf=&amp;quot;!display&amp;quot;&amp;gt;
Visible only when display is false.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;utiliser-la-syntaxe-as-pour-stocker-la-condition-ngif-dans-une-variable-locale&#34;&gt;Utiliser la syntaxe &amp;ldquo;as&amp;rdquo; pour stocker la condition &lt;code&gt;*ngIf&lt;/code&gt; dans une variable locale&lt;/h2&gt;

&lt;p&gt;Nous pouvons sauvegarder la condition &lt;code&gt;*ngIf&lt;/code&gt; dans une variable locale en utilisant &lt;code&gt;as&lt;/code&gt; et nous pouvons l&amp;rsquo;utiliser dans le template.&lt;/p&gt;

&lt;p&gt;Jetez un coup d&amp;rsquo;oeil à l&amp;rsquo;exemple ci-dessous.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div *ngIf=&amp;quot;display as ngIfCondition;else elseTemplate&amp;quot;&amp;gt;
  shows when display is {{ngIfCondition}}
&amp;lt;/div&amp;gt;

&amp;lt;ng-template #elseTemplate let-ngIfCondition&amp;gt;
  shows when display is {{ngIfCondition}}
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J&amp;rsquo;ai sauvegardé la condition &lt;code&gt;*ngIf&lt;/code&gt; dans une variable locale appelée &lt;code&gt;ngIfCondition&lt;/code&gt;.
Pour que nous puissions l&amp;rsquo;utiliser dans &amp;ldquo;else template&amp;rdquo; ou &amp;ldquo;then template&amp;rdquo; si nécessaire.&lt;/p&gt;

&lt;p&gt;And in &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; we must use the prefix &lt;code&gt;let&lt;/code&gt; before the variable.&lt;/p&gt;

&lt;p&gt;Vous vous demandez peut-être pourquoi c&amp;rsquo;est utile, parce que de toute façon l&amp;rsquo;expression va être &amp;ldquo;true&amp;rdquo; ou &amp;ldquo;false&amp;rdquo;. Ou nous pouvons simplement utiliser &lt;code&gt;{{display}}&lt;/code&gt; au lieu de déclarer la variable locale &lt;code&gt;ngIfCondition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La variable &lt;code&gt;display&lt;/code&gt; est statique et disponible au moment de l&amp;rsquo;évaluation &lt;code&gt;*ngIf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Et si la variable est asynchrone ? et provient d&amp;rsquo;une observable ?&lt;/p&gt;

&lt;h2 id=&#34;ngif-avec-async-pipe-et-exemple-observable&#34;&gt;*ngIf avec async pipe et exemple observable&lt;/h2&gt;

&lt;p&gt;Nous allons lier des données de produit provenant d&amp;rsquo;un observable à un composant à l&amp;rsquo;aide d&amp;rsquo;un &amp;ldquo;async pipe&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
&amp;lt;h3&amp;gt;Name:&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{(product| async)?.Name}}&amp;lt;/p&amp;gt;

&amp;lt;h3&amp;gt;Category:&amp;lt;/dh3&amp;gt;
&amp;lt;p&amp;gt;{{(product| async)?.category}}&amp;lt;/p&amp;gt;

&amp;lt;h3&amp;gt;Description:&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{(product| async)?.description}}&amp;lt;/p&amp;gt;

&amp;lt;h3&amp;gt;Price:&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{(product| async)?.price}}&amp;lt;/p&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On devrait utiliser des tuyaux sur toutes les propriétés qu&amp;rsquo;on veut montrer.&lt;/p&gt;

&lt;p&gt;Le problème avec l&amp;rsquo;approche ci-dessus est le suivant&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nous avons utilisé des tuyaux sur chaque propriété, ce qui crée un abonnement chaque fois que des tuyaux asynchrones sont utilisés. Dans l&amp;rsquo;exemple ci-dessus, nous allons créer 4 abonnements.&lt;/li&gt;
&lt;li&gt;Pour éviter cela, nous pouvons utiliser rxjs share() operator pour partager l&amp;rsquo;abonnement avec plusieurs abonnés.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; product: Observable&amp;lt;{}&amp;gt;;
      constructor() { }
      ngOnInit() {
        this.product= this.getAsyncData().pipe(share());
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Mais la vue composant reste la même, pour chaque propriété il faut utiliser &amp;ldquo;async pipe&amp;rdquo; et &amp;ldquo; ? Opérateur&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Et nous ne pouvons pas afficher de &amp;ldquo;templates alternatifs&amp;rdquo; pendant le chargement des données.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La solution idéale sera la suivante.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; if(product){
         //Display 
         product.Name
         product.category
         product.description
         product.price
    }else{
       //Loading
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C&amp;rsquo;est exactement ce que &lt;code&gt;*ngIf&lt;/code&gt; fera avec &amp;ldquo;async pipe&amp;rdquo; avec observable en utilisant la syntaxe &lt;code&gt;*ngIf as&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;*ngIf async pipe with observable&amp;lt;/h1&amp;gt;

&amp;lt;div *ngIf=&amp;quot;product | async as productItem; else loading&amp;quot;&amp;gt;
&amp;lt;div&amp;gt;
 &amp;lt;h3&amp;gt;Name:&amp;lt;/h3&amp;gt;
 &amp;lt;p&amp;gt;{{productItem.Name}}&amp;lt;/p&amp;gt;
 
 &amp;lt;h3&amp;gt;Category:&amp;lt;/dh3&amp;gt;
 &amp;lt;p&amp;gt;{{productItem.category}}&amp;lt;/p&amp;gt;
 
 &amp;lt;h3&amp;gt;Description:&amp;lt;/h3&amp;gt;
 &amp;lt;p&amp;gt;{{(productItem.description}}&amp;lt;/p&amp;gt;
 
 &amp;lt;h3&amp;gt;Price:&amp;lt;/h3&amp;gt;
 &amp;lt;p&amp;gt;{{productItem.price}}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;ng-template #loading let-productItem&amp;gt;
   Loading... (product is {{productItem|json}})
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nous allons creuser dans le code et voir ce qui se passe ici&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div *ngIf=&amp;quot;product | async as productItem; else loading&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous passons le produit observable à &amp;ldquo;*ngIf avec async pipe&amp;rdquo; et le stockons dans la variable locale &lt;code&gt;productItem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Initialement, si le produit est nul, il affichera le &amp;ldquo;#Loading template&amp;rdquo;, une fois le produit disponible, il affichera &amp;ldquo;Inline template&amp;rdquo; de &lt;code&gt;*ngIf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Le code ci-dessus avec *ngIf est très propre et facile à comprendre. Nous supprimons les opérateurs de safe-traversal-opérateur non désirés et les abonnements multiples.&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;espère que vous avez compris les concepts de base de la directive `*ngIf&amp;rsquo; avec &amp;ldquo;then template&amp;rdquo; et &amp;ldquo;else templates&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Disclaimer for AngularjsWiki Blog</title>
      <link>https://www.angularjswiki.com/fr/disclaimer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.angularjswiki.com/fr/disclaimer/</guid>
      <description>

&lt;p&gt;All the information on this website is published in good faith and for general information purpose only. www.angularjswiki.com does not make any warranties about the completeness, reliability, and accuracy of this information. Any action you take upon the information you find on this website (www.angularjswiki.com), is strictly at your own risk. www.angularjswiki.com will not be liable for any losses and/or damages in connection with the use of our website.&lt;/p&gt;

&lt;p&gt;From our website, you can visit other websites by following hyperlinks to such external sites. While we strive to provide only quality links to useful and ethical websites, we have no control over the content and nature of these sites. These links to other websites do not imply a recommendation for all the content found on these sites. Site owners and content may change without notice and may occur before we have the opportunity to remove a link which may have gone &amp;#8216;bad&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Please be also aware that when you leave our website, other sites may have different privacy policies and terms which are beyond our control. Please be sure to check the Privacy Policies of these sites as well as their &amp;#8220;Terms of Service&amp;#8221; before engaging in any business or uploading any information.&lt;/p&gt;

&lt;h3 id=&#34;consent&#34;&gt;Consent&lt;/h3&gt;

&lt;p&gt;By using our website, you hereby consent to our disclaimer and agree to its terms.&lt;/p&gt;

&lt;p&gt;If you require any more information or have any questions about our site&amp;#8217;s disclaimer, please feel free to contact us by email at &lt;a href=&#34;mailto:arunkumar.gudelli@gmail.com&#34; target=&#34;_blank&#34;&gt;arunkumar.gudelli@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contactez-moi</title>
      <link>https://www.angularjswiki.com/fr/contact-us/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.angularjswiki.com/fr/contact-us/</guid>
      <description>&lt;p&gt;Vous pouvez me contacter via arunkumar.gudelli@gmail.com&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Copyright Policy And Fair Use Guide</title>
      <link>https://www.angularjswiki.com/fr/copyright-policy-and-fair-use-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.angularjswiki.com/fr/copyright-policy-and-fair-use-guide/</guid>
      <description>

&lt;p&gt;If you are interested in linking articles of this blog please read the copyright policy&lt;/p&gt;

&lt;h3 id=&#34;liking-to-angularjswiki&#34;&gt;Liking to AngularJsWiki:&lt;/h3&gt;

&lt;p&gt;You can use short quotes from AngularJsWiki blog in your website or blog as long as proper credit is given&lt;/p&gt;

&lt;p&gt;Always provide a Full URl to the article&lt;br /&gt;
Do not use techniques like rel=nofollow to hide credits from search engines&lt;br /&gt;
Do not use an iframe tag when linking the content of this blog because that will hide URL in the browser address bar&lt;/p&gt;

&lt;h3 id=&#34;ask-me-before-copying-i-might-say-yes&#34;&gt;&lt;strong&gt;Ask Me before Copying I might Say Yes:&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you would like to reprint any of the articles from this blog on your website, weblog or in your publication, please contact me at &lt;a href=&#34;mailto:arunkumar.gudelli@gmail.com&#34; target=&#34;_blank&#34;&gt;arunkumar.gudelli@gmail.com&lt;/a&gt; with your request.&lt;/p&gt;

&lt;h3 id=&#34;copyright-violation-and-misuse&#34;&gt;Copyright Violation and Misuse:&lt;/h3&gt;

&lt;p&gt;If we discover a website or blog republishing my blog RSS feeds or website content illegally,&lt;br /&gt;
We will file a formal DMCA complaint with their advertising partners (like Google AdSense)&lt;br /&gt;
and the abuse department of their web hosting company.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Oops, you are offline.</title>
      <link>https://www.angularjswiki.com/fr/offline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.angularjswiki.com/fr/offline/</guid>
      <description>&lt;p&gt;Thanks to Service Workers, you can still visit the pages you&amp;rsquo;ve visited already.&lt;/p&gt;

&lt;p&gt;To visit something else, it&amp;rsquo;ll have to wait until you&amp;rsquo;re back online. Soon let&amp;rsquo;s hope!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy For www.angularjswiki.com</title>
      <link>https://www.angularjswiki.com/fr/privacy-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.angularjswiki.com/fr/privacy-policy/</guid>
      <description>

&lt;p&gt;At &lt;a href=&#34;http://www.angularjswiki.com&#34; target=&#34;_blank&#34;&gt;www.angularjswiki.com&lt;/a&gt;, the privacy of our visitors is of extreme importance to us. This privacy policy document outlines the types of personal information is received and collected by www.angularjswiki.com and how it is used.&lt;/p&gt;

&lt;h3 id=&#34;log-files&#34;&gt;&lt;em&gt;&lt;strong&gt;Log Files:&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Like many other Web sites, www.angularjswiki.com makes use of log files. The information inside the log files includes internet protocol ( IP ) addresses, type of browser, Internet Service Provider ( ISP ), date/time stamp, referring/exit pages, and the number of clicks to analyze trends, administer the site, track user’s movement around the site, and gather demographic information. IP addresses and other such information are not linked to any information that is personally identifiable.&lt;/p&gt;

&lt;h3 id=&#34;cookies-and-web-beacons&#34;&gt;&lt;em&gt;&lt;strong&gt;Cookies and Web Beacons:&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;www.angularjswiki.com does use cookies to store information about visitors preferences, record user-specific information on which pages the user access or visit, customize Web page content based on visitors browser type or other information that the visitor sends via their browser.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;DoubleClick DART Cookie:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;.:: Google, as a third party vendor, uses cookies to serve ads on &lt;a title=&#34;arunkumar&#39;s blog&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.angularjswiki.com&lt;/a&gt;.&lt;br /&gt;
.:: Google’s use of the DART cookie enables it to serve ads to users based on their visit to  &lt;a title=&#34;arunkumar&#39;s Blog&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.angularjswiki.com&lt;/a&gt; and other sites on the Internet.&lt;br /&gt;
.:: Users may opt out of the use of the DART cookie by visiting the Google ad and content network privacy policy at the following URL – &lt;a title=&#34;google policy&#34; href=&#34;http://www.google.com/privacy_ads.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;a href=&#34;http://www.google.com/privacy_ads.html&#34; target=&#34;_blank&#34;&gt;http://www.google.com/privacy_ads.html&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of our advertising partners may use cookies and web beacons on our site. Our advertising partners include ….&lt;br /&gt;
Google Adsense&lt;br /&gt;
These third-party ad servers or ad networks use technology to the advertisements and links that appear on &lt;a title=&#34;arunkumar&#39;s blog&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.&lt;/a&gt;&lt;a title=&#34;arunkumar&#39;s blog&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;angularjswiki&lt;/a&gt;&lt;a title=&#34;arunkumar&#39;s blog&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;.com&lt;/a&gt; send directly to your browsers. They automatically receive your IP address when this occurs. Other technologies ( such as cookies, JavaScript, or Web Beacons ) may also be used by the third-party ad networks to measure the effectiveness of their advertisements and / or to personalize the advertising content that you see.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;Arunkumar&#39;s Blog&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.&lt;/a&gt;&lt;a title=&#34;arunkumar&#39;s blog&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;angularjswiki&lt;/a&gt;&lt;a title=&#34;Arunkumar&#39;s Blog&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;.com&lt;/a&gt; has no access to or control over these cookies that are used by third-party advertisers.&lt;/p&gt;

&lt;p&gt;You should consult the respective privacy policies of these third-party ad servers for more detailed information on their practices as well as for instructions about how to opt-out of certain practices. &lt;a title=&#34;arunkumar&#39;s&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.&lt;/a&gt;&lt;a title=&#34;arunkumar&#39;s blog&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;angularjswiki&lt;/a&gt;&lt;a title=&#34;arunkumar&#39;s&#34; href=&#34;http://www.arungudelli.com/privacy-policy/www.arungudelli.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;.com&lt;/a&gt;‘s privacy policy does not apply to, and we cannot control the activities of, such other advertisers or websites.&lt;/p&gt;

&lt;p&gt;If you wish to disable cookies, you may do so through your individual browser options. More detailed information about cookie management with specific web browsers can be found at the browsers’ respective websites.&lt;/p&gt;

&lt;p&gt;If you require any more information or have any questions about our privacy policy, please feel free to contact us by email at &lt;a href=&#34;mailto:arunkumar.gudelli@gmail.com&#34; target=&#34;_blank&#34;&gt;arunkumar.gudelli@gmail.com&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
