[{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"fr","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"https://www.angularjswiki.com/fr/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/fr/authors/admin/","section":"author","summary":"","tags":null,"title":"Arunkumar Gudelli","type":"author"},{"authors":["Arunkumar Gudelli"],"categories":null,"content":" Nous pouvons importer ou lire des fichiers JSON local dans Angular, de plusieurs façons différentes selon la version Angular que nous utilisons.\nDans cet article, vous apprendrez différentes méthodes pour lire les fichiers JSON en Angular avec des exemples.\nTable des matières\r   Lecture des fichiers JSON local dans Angular 7 et Angular 6.1 Lecture des fichiers JSON local dans Angular 5 ou Angular 4 Lecture des fichiers JSON local dans les versions Angular 2+. Lecture des fichiers JSON local dans les applications angulaires hors ligne   \rLecture des fichiers JSON local dans Angular 7 et Angular 6.1 Le framework Angular supporte TypeScript 2.9 à partir de la version 6.1.\nDans typescript 2.9 avec l\u0026rsquo;aide de resolveJsonModule nous pouvons importer des fichiers JSON locaux comme des modules\nJ\u0026rsquo;ai ajouté un exemple de fichier JSON dans le dossier assets de Angular App.\nJetez un coup d\u0026rsquo;oeil à l\u0026rsquo;échantillon json\n{ \u0026quot;Post\u0026quot;: \u0026quot;Angular Json Files\u0026quot;, \u0026quot;CanEdit\u0026quot;: true, \u0026quot;Version\u0026quot;: 7 }  J\u0026rsquo;ai importé sampleJson.json dans notre composant ReadingJsonFiles Component comme indiqué ci-dessous\nimport { Component, OnInit } from '@angular/core'; import SampleJson from '../../assets/SampleJson.json'; @Component({ selector: 'app-reading-json-files', templateUrl: './reading-json-files.component.html', styleUrls: ['./reading-json-files.component.css'] }) export class ReadingJsonFilesComponent implements OnInit { constructor() { console.log('Reading local json files'); console.log(SampleJson); } ngOnInit() {} }  Maintenant, si vous compilez l\u0026rsquo;application, vous obtiendrez l\u0026rsquo;erreur suivante.\n\rERROR in src/app/reading-json-files/reading-json-files.component.ts(2,24): error TS2732: Cannot find module \u0026lsquo;../../assets/SampleJson.json\u0026rsquo;. Consider using \u0026lsquo;–resolveJsonModule\u0026rsquo; to import module with \u0026lsquo;.json\u0026rsquo; extension\n\r\rPour supprimer l\u0026rsquo;erreur ci-dessus, dans le fichier tsconfig.json sous les options du compilateur, nous devons ajouter les configurations \u0026ldquo;resolveJsonModule\u0026rdquo; et \u0026ldquo;esModuleInterop\u0026rdquo; comme indiqué ci-dessous.\n{ \u0026quot;compilerOptions\u0026quot;: { \u0026quot;resolveJsonModule\u0026quot;: true, \u0026quot;esModuleInterop\u0026quot;: true } }  Une autre chose que vous devez comprendre est que le contenu du fichier JSON importé est typesafe.\nDans le json ci-dessus, version est un nombre. Ainsi, si vous affectez la version à une chaîne de caractères, une erreur sera générée.\nSampleJson.Version= \u0026quot;Seven\u0026quot;; //throws error as Version is of type number  Lecture des fichiers JSON local dans Angular 5 ou Angular 4 Dans les versions antérieures de Angular comme Angular 5 ou Angular 4 pour lire les fichiers json locaux, nous avons besoin d\u0026rsquo;utiliser HttpClient depuis \u0026lsquo;@angular/common/http\u0026rsquo; et Observable depuis \u0026lsquo;rxjs/Observable\u0026rsquo; comme indiqué ci-dessous.\nNous devons injecter HttpClient dans le constructor.\nimport { HttpClient } from '@angular/common/http'; import { Observable } from 'rxjs'; @Component({ selector: 'app-reading', templateUrl: './reading.component.html', styleUrls: ['./reading.component.css'] }) export class ReadingComponent implements OnInit { private _jsonURL = 'assets/SampleJson.json'; constructor(private http: HttpClient) { this.getJSON().subscribe(data =\u0026gt; { console.log(data); }); } public getJSON(): Observable\u0026lt;any\u0026gt; { return this.http.get(this._jsonURL); } ngOnInit() { } }  HttpClient est introduit dans Angular 4.3, Si vous utilisez Angular version 4.3 ci-dessous utilisez la méthode ci-dessous pour lire les fichiers JSON\nLecture des fichiers JSON local dans les versions Angular 2+. Nous avons besoin d\u0026rsquo;utiliser Http depuis \u0026ldquo;@angular/http\u0026rdquo; pour importer les fichiers JSON dans Angular version 4.3 ci-dessous et Angular 2 + applications.\nimport { Component, Input } from '@angular/core'; import { Injectable } from '@angular/core'; import { Http, Response, Headers, RequestOptions } from '@angular/http'; import {Observable} from 'rxjs/Rx'; import 'rxjs/add/operator/map'; import 'rxjs/add/operator/catch'; @Injectable() export class ReadingJsonService{ private _jsonURL = 'assets/SampleJson.json'; constructor(private http: Http) { var object; this.getJSON().subscribe(data =\u0026gt; object=data, error =\u0026gt; console.log(error)); } public getJSON(): Observable\u0026lt;any\u0026gt; { return this.http.get(_jsonURL) .map((response:any) =\u0026gt; response.json()) .catch((error:any) =\u0026gt; console.log(error)); } }  Lecture des fichiers JSON local dans les applications angulaires hors ligne Angular Http ne fonctionnera pas si l\u0026rsquo;application est hors ligne.\nDans ce cas, nous avons un autre moyen d\u0026rsquo;importer les fichiers JSON.\nNous devons ajouter un nouveau fichier json-typings.d.ts dans le dossier app.\ndeclare module \u0026quot;*.json\u0026quot; { const value: any; export default value; }  Et puis nous pouvons importer des fichiers JSON tout comme les dernières versions d\u0026rsquo;Angular\nimport * as SampleJson from \u0026quot;../../assets/SampleJson.json\u0026quot;;\n","date":1541120465,"expirydate":-62135596800,"kind":"page","lang":"fr","lastmod":1542114951,"objectID":"25b9871dfcdf2a17580361f92b5ee8ec","permalink":"https://www.angularjswiki.com/fr/angular/how-to-read-local-json-files-in-angular/","publishdate":"2018-11-02T01:01:05Z","relpermalink":"/fr/angular/how-to-read-local-json-files-in-angular/","section":"angular","summary":"Nous pouvons importer ou lire des fichiers JSON local dans Angular, de plusieurs façons différentes selon la version Angular que nous utilisons","tags":null,"title":"Comment lire les fichiers JSON local dans Angular","type":"post"},{"authors":["Arunkumar Gudelli"],"categories":null,"content":" Angular\u0026rsquo;s \u0026ldquo;*ngIf\u0026rdquo; affiche ou supprime un élément du DOM en fonction de la condition donnée.\nPour écrire \u0026ldquo;ngIf else\u0026rdquo; dans angular, il faut définir un modèle \u0026ldquo;else\u0026rdquo; pour la directive \u0026ldquo;*ngIf\u0026rdquo;.\n\u0026ldquo;*ngIf\u0026rdquo; combiné avec \u0026ldquo;async pipe\u0026rdquo; est très utile lors de la lecture de données à partir d\u0026rsquo;un fichier observable.\nDans toutes les versions de Angular, la syntaxe de la directive *ngif est la même.\nTable des matières\r   comprendre *ngIf dans Angular avec exemple Etapes pour écrire \u0026ldquo;*ngIf else\u0026rdquo; en Angulaire avec exemple *ngIf avec alternative puis template dans Angular *ngif avec \u0026ldquo;else and then templates\u0026rdquo; exemple dans Angular *ngif avec opérateurs logiques AND (\u0026amp;\u0026amp;), OR(||), NOT( !) Utiliser la syntaxe \u0026ldquo;as\u0026rdquo; pour stocker la condition *ngIf dans une variable locale *ngIf avec async pipe et exemple observable   \rcomprendre *ngIf dans Angular avec exemple *ngIf évalue la condition donnée et rend ensuite le \u0026ldquo;then template\u0026rdquo; ou \u0026ldquo;else template\u0026rdquo;.\nRegardez l\u0026rsquo;exemple ci-dessous\n\u0026lt;div *ngIf=\u0026quot;display\u0026quot;\u0026gt;Hi I am Visible\u0026lt;/div\u0026gt;  Si la propriété display est vraie alors l\u0026rsquo;élément `\u0026rsquo; sera ajouté au DOM. Sinon, aucun élément ne sera ajouté.\nLes templates par défaut de *ngIf sont\n \u0026ldquo;then template\u0026rdquo; est inline template de ngIf.\n \u0026ldquo;else template\u0026rdquo; est vide  Dans le code ci-dessus, inline template est \u0026lt;div\u0026gt;Hi I am Visible\u0026lt;/div\u0026gt; et il n\u0026rsquo;y a pas else template.\nNous pouvons lier des templates alternatifs à *ngif en fonction de notre utilisation.\n*ngIf est une directive qui signifie que nous pouvons l\u0026rsquo;ajouter à n\u0026rsquo;importe quelle \u0026ldquo;HTML tag\u0026rdquo;\n\u0026lt;p *ngIf=\u0026quot;display\u0026quot;\u0026gt;Visible only if display is true\u0026lt;/p\u0026gt;  Ou nous pouvons l\u0026rsquo;appliquer à d\u0026rsquo;autres composants angular, par exemple le composant Material Checkbox.\n\u0026lt;mat-checkbox *ngIf=\u0026quot;display\u0026quot;\u0026gt;Material Checkbox\u0026lt;/mat-checkbox\u0026gt;  La syntaxe est très simple, nous devons ajouter un préfixe, astérisque(*) avant le nom de la directive `ngIf\u0026rsquo;.\nAlors pourquoi devons-nous ajouter l\u0026rsquo;astérisque avant le nom de la directive ?\nL\u0026rsquo;astérisque devant \u0026ldquo; ngIf \u0026rdquo; nous simplifie la vie.\nAngular convertira l\u0026rsquo;attribut *ngif en élément \u0026lt;ng-template\u0026gt; comme indiqué ci-dessous.\n\u0026lt;div *ngIf=\u0026quot;display\u0026quot; class=\u0026quot;inline\u0026quot;\u0026gt;Hi I am Visible\u0026lt;/div\u0026gt; //This will be converted to \u0026lt;ng-template [ngIf]=\u0026quot;display\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;inline\u0026quot;\u0026gt;Hi I am Visible\u0026lt;/div\u0026gt; \u0026lt;/ng-template\u0026gt; //inline default template (then template) //And no else template \u0026lt;div *ngIf=\u0026quot;false\u0026quot; class=\u0026quot;inline\u0026quot;\u0026gt;This is not added to DOM\u0026lt;/div\u0026gt; \u0026lt;ng-template [ngIf]=\u0026quot;false\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;inline\u0026quot;\u0026gt;This is not added to DOM \u0026lt;/div\u0026gt; \u0026lt;/ng-template\u0026gt;  Maintenant, la définition ci-dessus a un sens.\n\u0026ldquo;then template\u0026rdquo; est \u0026lt;div\u0026gt;Hi I am Visible\u0026lt;/div\u0026gt; qui est inline. Il n\u0026rsquo;y a pas d\u0026rsquo; \u0026ldquo;else template\u0026rdquo;.\nL\u0026rsquo;astérisque n\u0026rsquo;est qu\u0026rsquo;un sucre syntaxique de l\u0026rsquo;élément ng-template.\nEt si vous voyez le HTML généré, aucun élément ne sera ajouté au DOM si la condition de ngIf est false.\n\r\r\rngif\r\r\rAlors pourquoi angular enlèvera l\u0026rsquo;élément plutôt que de le cacher ?\nLire la suite Différence entre ngIf et \u0026ldquo;hidden\u0026rdquo; dans Angular\nNous pouvons utiliser `ngIf\u0026rsquo; de quatre manières différentes\n Simple `ngIf\u0026rsquo; (comme expliqué ci-dessus) \u0026ldquo;*ngIf\u0026rdquo; avec \u0026ldquo;else\u0026rdquo; \u0026ldquo;*ngIf\u0026rdquo; avec \u0026ldquo;then\u0026rdquo; \u0026ldquo;*ngIf\u0026rdquo; avec \u0026ldquo;then\u0026rdquo; et \u0026ldquo;else\u0026rdquo;  Maintenant, comment pouvons-nous écrire *ngIf else en angular ?\nnous avons besoin de lier else' template à*ngIf\u0026rdquo;.\nEtapes pour écrire \u0026ldquo;*ngIf else\u0026rdquo; en Angulaire avec exemple Nous apprendrons à écrire \u0026ldquo;*ngIf else\u0026rdquo; en utilisant le \u0026lt;ng-template\u0026gt; d\u0026rsquo;Angular avec un exemple simple.\n\u0026lt;div *ngIf=\u0026quot;display; else elseTemplate\u0026quot; class=\u0026quot;main\u0026quot;\u0026gt; Visible when display is true \u0026lt;/div\u0026gt; \u0026lt;ng-template #elseTemplate\u0026gt; \u0026lt;div class=\u0026quot;alternative\u0026quot;\u0026gt; Visible when display is false \u0026lt;/div\u0026gt; \u0026lt;/ng-template\u0026gt;  Le bloc else pointe vers un \u0026lt;ng-template\u0026gt; étiqueté #elseTemplate. Si la condition ou l\u0026rsquo;expression est vraie, \u0026ldquo;inline template\u0026rdquo; sera rendu par défaut sinon else template sera rendu.\nEt ce template peut être défini n\u0026rsquo;importe où dans la vue des composants, mais comme une bonne pratique et pour améliorer la lisibilité, il est défini juste en dessous du bloc ngIf.\nimport { Component, OnInit } from '@angular/core'; @Component({ selector:'app-ngifelse', templateUrl:'./ngifelse.component.html', styleUrls: ['./ngifelse.component.css'] }) export class NgifelseComponent implements OnInit { display:boolean; constructor() { this.display=true; } ngOnInit() {} } //*ngIf else Component View \u0026lt;ng-template #elseTemplate\u0026gt; \u0026lt;div class=\u0026quot;alternative\u0026quot;\u0026gt; Visible when display is false \u0026lt;/div\u0026gt; \u0026lt;/ng-template\u0026gt; \u0026lt;div\u0026gt; This example explains how to write *ngIf else block in Angular. And ng-template block can be defined anywhere in the component view \u0026lt;/div\u0026gt; \u0026lt;div *ngIf=\u0026quot;display; else elseTemplate\u0026quot; class=\u0026quot;main\u0026quot;\u0026gt; Visible when display is true \u0026lt;/div\u0026gt;  J\u0026rsquo;ai déclaré \u0026ldquo;else template\u0026rdquo; au-dessus du bloc *ngIf' dans la vueNgIfElseComponent\u0026rsquo;, mais évitez d\u0026rsquo;écrire ainsi car c\u0026rsquo;est difficile à comprendre.\nLe bloc *ngIf else ci-dessus sera converti en l\u0026rsquo;élément \u0026lt;ng-template\u0026gt; suivant.\n\u0026lt;ng-template [ngIf]=\u0026quot;display\u0026quot; [ngIfElse]=\u0026quot;elseTemplate\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;main\u0026quot;\u0026gt; Visible when display is true \u0026lt;/div\u0026gt; \u0026lt;/ng-template\u0026gt; \u0026lt;ng-template #elseTemplate\u0026gt; \u0026lt;div class=\u0026quot;alternative\u0026quot;\u0026gt; Visible when display is false \u0026lt;/div\u0026gt; \u0026lt;/ng-template\u0026gt;  *ngIf avec alternative puis template dans Angular Par défaut, le \u0026ldquo;then template\u0026rdquo; de *ngIf est le \u0026ldquo;inline template\u0026rdquo;.\nPour changer le inline template de ngIf, il suffit de lier \u0026ldquo;then block\u0026rdquo; à l\u0026rsquo;alternative \u0026lt;ng-template\u0026gt;.\nVoir l\u0026rsquo;exemple ci-dessous\nimport { Component, OnInit } from '@angular/core'; @Component({ selector:'app-ngifthen', templateUrl:'./ngifthen.component.html', styleUrls: ['./ngifthen.component.css'] }) export class NgifthenComponent implements OnInit { display:boolean; constructor() { this.display=true; } ngOnInit() {} } //NgIfthen Component view \u0026lt;div *ngIf=\u0026quot;display; then thenTemplate\u0026quot;\u0026gt; Inline template will be ignored \u0026lt;/div\u0026gt; \u0026lt;ng-template #thenTemplate\u0026gt; Displayed when display is true \u0026lt;/ng-template\u0026gt;  Vous pourriez penser que pourquoi nous avons besoin d\u0026rsquo;une référence de template [ngIfThen] quand nous avons un template Inline.\nnous pouvons changer les blocs \u0026ldquo;then\u0026rdquo; ou \u0026ldquo;else\u0026rdquo; dynamiquement au moment de l\u0026rsquo;exécution en profitant de ces [ngIfThen] et [ngIfElse]\nLire l\u0026rsquo;article\nhttps://www.angularjswiki.com/angular/dynamically-change-ngif-thenelse-templates-at-runtime-in-angular/\n*ngif avec \u0026ldquo;else and then templates\u0026rdquo; exemple dans Angular Nous pouvons lier à la fois \u0026ldquo;else template\u0026rdquo; et \u0026ldquo;then template\u0026rdquo; à la directive *ngIf comme indiqué ci-dessous.\nEt dans ce cas, le \u0026ldquo;inline template\u0026rdquo; par défaut sera ignoré.\n\u0026lt;div *ngIf=\u0026quot;display; then thenTemplate; else elseTemplate\u0026quot;\u0026gt; Inline template will be ignored \u0026lt;/div\u0026gt; \u0026lt;ng-template #thenTemplate\u0026gt; Displayed when display is true \u0026lt;/ng-template\u0026gt; \u0026lt;ng-template #elseTemplate\u0026gt; Displayed when display is false \u0026lt;/ng-template\u0026gt;  Et ceci sera converti en\n\u0026lt;ng-template [ngIf]=\u0026quot;display\u0026quot; [ngIfThen]=\u0026quot;thenTemplate\u0026quot; [ngIfElse]=\u0026quot;elseTemplate\u0026quot;\u0026gt; Inline template will be ignored \u0026lt;/ng-template\u0026gt; \u0026lt;ng-template #thenTemplate\u0026gt; Displayed when display is true \u0026lt;/ng-template\u0026gt; \u0026lt;ng-template #elseTemplate\u0026gt; Displayed when display is false \u0026lt;/ng-template\u0026gt;  *ngif avec opérateurs logiques AND (\u0026amp;\u0026amp;), OR(||), NOT( !) Nous pouvons utiliser les opérateurs logiques AND (\u0026amp;\u0026amp;\u0026amp;),OR(|||) et NOT( !) en condition *ngif.\nEn voici des exemples.\n\u0026lt;!-- logic AND \u0026amp;\u0026amp; operator --\u0026gt; \u0026lt;div *ngIf=\u0026quot;display \u0026amp;\u0026amp; hasAccess\u0026quot;\u0026gt; Visible when display and hasAccess are true \u0026lt;/div\u0026gt; \u0026lt;!-- logic OR || operator --\u0026gt; \u0026lt;div *ngIf=\u0026quot;display || hasAccess\u0026quot;\u0026gt; Visisble when one of the variable display or hasAccess true \u0026lt;/div\u0026gt; \u0026lt;!-- logical NOT ! operator\u0026quot; --\u0026gt; \u0026lt;div *ngIf=\u0026quot;!display\u0026quot;\u0026gt; Visible only when display is false. \u0026lt;/div\u0026gt;  Utiliser la syntaxe \u0026ldquo;as\u0026rdquo; pour stocker la condition *ngIf dans une variable locale Nous pouvons sauvegarder la condition *ngIf dans une variable locale en utilisant as et nous pouvons l\u0026rsquo;utiliser dans le template.\nJetez un coup d\u0026rsquo;oeil à l\u0026rsquo;exemple ci-dessous.\n\u0026lt;div *ngIf=\u0026quot;display as ngIfCondition;else elseTemplate\u0026quot;\u0026gt; shows when display is {{ngIfCondition}} \u0026lt;/div\u0026gt; \u0026lt;ng-template #elseTemplate let-ngIfCondition\u0026gt; shows when display is {{ngIfCondition}} \u0026lt;/ng-template\u0026gt;  J\u0026rsquo;ai sauvegardé la condition *ngIf dans une variable locale appelée ngIfCondition. Pour que nous puissions l\u0026rsquo;utiliser dans \u0026ldquo;else template\u0026rdquo; ou \u0026ldquo;then template\u0026rdquo; si nécessaire.\nAnd in \u0026lt;ng-template\u0026gt; we must use the prefix let before the variable.\nVous vous demandez peut-être pourquoi c\u0026rsquo;est utile, parce que de toute façon l\u0026rsquo;expression va être \u0026ldquo;true\u0026rdquo; ou \u0026ldquo;false\u0026rdquo;. Ou nous pouvons simplement utiliser {{display}} au lieu de déclarer la variable locale ngIfCondition.\nLa variable display est statique et disponible au moment de l\u0026rsquo;évaluation *ngIf.\nEt si la variable est asynchrone ? et provient d\u0026rsquo;une observable ?\n*ngIf avec async pipe et exemple observable Nous allons lier des données de produit provenant d\u0026rsquo;un observable à un composant à l\u0026rsquo;aide d\u0026rsquo;un \u0026ldquo;async pipe\u0026rdquo;.\n\u0026lt;div\u0026gt; \u0026lt;h3\u0026gt;Name:\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{(product| async)?.Name}}\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Category:\u0026lt;/dh3\u0026gt; \u0026lt;p\u0026gt;{{(product| async)?.category}}\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Description:\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{(product| async)?.description}}\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Price:\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{(product| async)?.price}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;  On devrait utiliser des tuyaux sur toutes les propriétés qu\u0026rsquo;on veut montrer.\nLe problème avec l\u0026rsquo;approche ci-dessus est le suivant\n Nous avons utilisé des tuyaux sur chaque propriété, ce qui crée un abonnement chaque fois que des tuyaux asynchrones sont utilisés. Dans l\u0026rsquo;exemple ci-dessus, nous allons créer 4 abonnements. Pour éviter cela, nous pouvons utiliser rxjs share() operator pour partager l\u0026rsquo;abonnement avec plusieurs abonnés.   product: Observable\u0026lt;{}\u0026gt;; constructor() { } ngOnInit() { this.product= this.getAsyncData().pipe(share()); }   Mais la vue composant reste la même, pour chaque propriété il faut utiliser \u0026ldquo;async pipe\u0026rdquo; et \u0026ldquo; ? Opérateur\u0026rdquo; Et nous ne pouvons pas afficher de \u0026ldquo;templates alternatifs\u0026rdquo; pendant le chargement des données.  La solution idéale sera la suivante.\n if(product){ //Display product.Name product.category product.description product.price }else{ //Loading }  C\u0026rsquo;est exactement ce que *ngIf fera avec \u0026ldquo;async pipe\u0026rdquo; avec observable en utilisant la syntaxe *ngIf as.\n\u0026lt;h1\u0026gt;*ngIf async pipe with observable\u0026lt;/h1\u0026gt; \u0026lt;div *ngIf=\u0026quot;product | async as productItem; else loading\u0026quot;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h3\u0026gt;Name:\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{productItem.Name}}\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Category:\u0026lt;/dh3\u0026gt; \u0026lt;p\u0026gt;{{productItem.category}}\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Description:\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{(productItem.description}}\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Price:\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{productItem.price}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;ng-template #loading let-productItem\u0026gt; Loading... (product is {{productItem|json}}) \u0026lt;/ng-template\u0026gt;  nous allons creuser dans le code et voir ce qui se passe ici\n\u0026lt;div *ngIf=\u0026quot;product | async as productItem; else loading\u0026quot;\u0026gt;  Nous passons le produit observable à \u0026ldquo;*ngIf avec async pipe\u0026rdquo; et le stockons dans la variable locale productItem.\nInitialement, si le produit est nul, il affichera le \u0026ldquo;#Loading template\u0026rdquo;, une fois le produit disponible, il affichera \u0026ldquo;Inline template\u0026rdquo; de *ngIf.\nLe code ci-dessus avec *ngIf est très propre et facile à comprendre. Nous supprimons les opérateurs de safe-traversal-opérateur non désirés et les abonnements multiples.\nJ\u0026rsquo;espère que vous avez compris les concepts de base de la directive `*ngIf\u0026rsquo; avec \u0026ldquo;then template\u0026rdquo; et \u0026ldquo;else templates\u0026rdquo;.\n","date":1533344465,"expirydate":-62135596800,"kind":"page","lang":"fr","lastmod":1572106819,"objectID":"ed3c3fcf95aef168631309a12a1bc3d7","permalink":"https://www.angularjswiki.com/fr/angular/understanding-angulars-ngif-else-then-with-examples/","publishdate":"2018-08-04T01:01:05Z","relpermalink":"/fr/angular/understanding-angulars-ngif-else-then-with-examples/","section":"angular","summary":"Pour écrire ngIf else dans angular, il faut définir un modèle else pour la directive *ngIf.*ngIf affiche ou supprime un élément du DOM en fonction de la condition donnée.","tags":null,"title":"*ngIf else dans Angular \u0026 Exemple *NgIf Async Pipe Observable","type":"post"},{"authors":null,"categories":null,"content":" All the information on this website is published in good faith and for general information purpose only. www.angularjswiki.com does not make any warranties about the completeness, reliability, and accuracy of this information. Any action you take upon the information you find on this website (www.angularjswiki.com), is strictly at your own risk. www.angularjswiki.com will not be liable for any losses and/or damages in connection with the use of our website.\nFrom our website, you can visit other websites by following hyperlinks to such external sites. While we strive to provide only quality links to useful and ethical websites, we have no control over the content and nature of these sites. These links to other websites do not imply a recommendation for all the content found on these sites. Site owners and content may change without notice and may occur before we have the opportunity to remove a link which may have gone \u0026#8216;bad\u0026#8217;.\nPlease be also aware that when you leave our website, other sites may have different privacy policies and terms which are beyond our control. Please be sure to check the Privacy Policies of these sites as well as their \u0026#8220;Terms of Service\u0026#8221; before engaging in any business or uploading any information.\nConsent By using our website, you hereby consent to our disclaimer and agree to its terms.\nIf you require any more information or have any questions about our site\u0026#8217;s disclaimer, please feel free to contact us by email at arunkumar.gudelli@gmail.com\n\u0026nbsp;\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"fr","lastmod":-62135596800,"objectID":"c77f8acf81cae4a0c5bd453cf98fb1a4","permalink":"https://www.angularjswiki.com/fr/disclaimer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/fr/disclaimer/","section":"","summary":"All the information on this website is published in good faith and for general information purpose only. www.angularjswiki.com does not make any warranties about the completeness, reliability, and accuracy of this information. Any action you take upon the information you find on this website (www.angularjswiki.com), is strictly at your own risk. www.angularjswiki.com will not be liable for any losses and/or damages in connection with the use of our website.","tags":null,"title":" Disclaimer for AngularjsWiki Blog","type":"page"},{"authors":null,"categories":null,"content":"Vous pouvez me contacter via arunkumar.gudelli@gmail.com\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"fr","lastmod":-62135596800,"objectID":"70180c54893436729e3367503c70a6ee","permalink":"https://www.angularjswiki.com/fr/contact-us/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/fr/contact-us/","section":"","summary":"Vous pouvez me contacter via arunkumar.gudelli@gmail.com","tags":null,"title":"Contactez-moi","type":"page"},{"authors":null,"categories":null,"content":" If you are interested in linking articles of this blog please read the copyright policy\nLiking to AngularJsWiki: You can use short quotes from AngularJsWiki blog in your website or blog as long as proper credit is given\nAlways provide a Full URl to the article\nDo not use techniques like rel=nofollow to hide credits from search engines\nDo not use an iframe tag when linking the content of this blog because that will hide URL in the browser address bar\nAsk Me before Copying I might Say Yes: If you would like to reprint any of the articles from this blog on your website, weblog or in your publication, please contact me at arunkumar.gudelli@gmail.com with your request.\nCopyright Violation and Misuse: If we discover a website or blog republishing my blog RSS feeds or website content illegally,\nWe will file a formal DMCA complaint with their advertising partners (like Google AdSense)\nand the abuse department of their web hosting company.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"fr","lastmod":-62135596800,"objectID":"11b746696cc7288b1546077a8724ba1b","permalink":"https://www.angularjswiki.com/fr/copyright-policy-and-fair-use-guide/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/fr/copyright-policy-and-fair-use-guide/","section":"","summary":"If you are interested in linking articles of this blog please read the copyright policy\nLiking to AngularJsWiki: You can use short quotes from AngularJsWiki blog in your website or blog as long as proper credit is given\nAlways provide a Full URl to the article\nDo not use techniques like rel=nofollow to hide credits from search engines\nDo not use an iframe tag when linking the content of this blog because that will hide URL in the browser address bar","tags":null,"title":"Copyright Policy And Fair Use Guide","type":"page"},{"authors":null,"categories":null,"content":"Thanks to Service Workers, you can still visit the pages you\u0026rsquo;ve visited already.\nTo visit something else, it\u0026rsquo;ll have to wait until you\u0026rsquo;re back online. Soon let\u0026rsquo;s hope!\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"fr","lastmod":-62135596800,"objectID":"0977fd0d9e4bc38a2a211097b94cf0fb","permalink":"https://www.angularjswiki.com/fr/offline/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/fr/offline/","section":"","summary":"Thanks to Service Workers, you can still visit the pages you\u0026rsquo;ve visited already.\nTo visit something else, it\u0026rsquo;ll have to wait until you\u0026rsquo;re back online. Soon let\u0026rsquo;s hope!","tags":null,"title":"Oops, you are offline.","type":"page"},{"authors":null,"categories":null,"content":" At www.angularjswiki.com, the privacy of our visitors is of extreme importance to us. This privacy policy document outlines the types of personal information is received and collected by www.angularjswiki.com and how it is used.\nLog Files: Like many other Web sites, www.angularjswiki.com makes use of log files. The information inside the log files includes internet protocol ( IP ) addresses, type of browser, Internet Service Provider ( ISP ), date/time stamp, referring/exit pages, and the number of clicks to analyze trends, administer the site, track user’s movement around the site, and gather demographic information. IP addresses and other such information are not linked to any information that is personally identifiable.\nCookies and Web Beacons: www.angularjswiki.com does use cookies to store information about visitors preferences, record user-specific information on which pages the user access or visit, customize Web page content based on visitors browser type or other information that the visitor sends via their browser.\nDoubleClick DART Cookie:\n.:: Google, as a third party vendor, uses cookies to serve ads on www.angularjswiki.com.\n.:: Google’s use of the DART cookie enables it to serve ads to users based on their visit to www.angularjswiki.com and other sites on the Internet.\n.:: Users may opt out of the use of the DART cookie by visiting the Google ad and content network privacy policy at the following URL – http://www.google.com/privacy_ads.html\nSome of our advertising partners may use cookies and web beacons on our site. Our advertising partners include ….\nGoogle Adsense\nThese third-party ad servers or ad networks use technology to the advertisements and links that appear on www.angularjswiki.com send directly to your browsers. They automatically receive your IP address when this occurs. Other technologies ( such as cookies, JavaScript, or Web Beacons ) may also be used by the third-party ad networks to measure the effectiveness of their advertisements and / or to personalize the advertising content that you see.\nwww.angularjswiki.com has no access to or control over these cookies that are used by third-party advertisers.\nYou should consult the respective privacy policies of these third-party ad servers for more detailed information on their practices as well as for instructions about how to opt-out of certain practices. www.angularjswiki.com‘s privacy policy does not apply to, and we cannot control the activities of, such other advertisers or websites.\nIf you wish to disable cookies, you may do so through your individual browser options. More detailed information about cookie management with specific web browsers can be found at the browsers’ respective websites.\nIf you require any more information or have any questions about our privacy policy, please feel free to contact us by email at arunkumar.gudelli@gmail.com.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"fr","lastmod":-62135596800,"objectID":"7e38e8dcb6d4e31a36d8cb78795190da","permalink":"https://www.angularjswiki.com/fr/privacy-policy/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/fr/privacy-policy/","section":"","summary":"At www.angularjswiki.com, the privacy of our visitors is of extreme importance to us. This privacy policy document outlines the types of personal information is received and collected by www.angularjswiki.com and how it is used.\nLog Files: Like many other Web sites, www.angularjswiki.com makes use of log files. The information inside the log files includes internet protocol ( IP ) addresses, type of browser, Internet Service Provider ( ISP ), date/time stamp, referring/exit pages, and the number of clicks to analyze trends, administer the site, track user’s movement around the site, and gather demographic information.","tags":null,"title":"Privacy Policy For www.angularjswiki.com","type":"page"}]